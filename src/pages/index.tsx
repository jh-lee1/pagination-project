import { Search } from '@/components/Search/Search';
import { TableHeader } from '@/components/TableHeader';
import { Pagination as PaginationComponent } from '@/components/pagination';
import { PostHeader } from '@/components/postHeader';
import { PostItem } from '@/components/postItem';
import { Pagination } from '@/types/pagination';
import { PostResponseDto } from '@/types/post/responseDto';
import { SearchValue } from '@/types/post/searchValue';
import styled from '@emotion/styled';
import axios from 'axios';
import { GetServerSideProps } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function Home(props: Pagination<PostResponseDto[]>) {
  const router = useRouter();
  const { page, category, value } = router.query;
  // const [page , setPage] = useState(1);
  // const [searchValue, setSearchValue] = useState<SearchValue>({category:'', value:''})
  const [posts, setPosts] = useState<Pagination<PostResponseDto[]>>(props);

  // const handleChangePage = (currentPage: number) => {
  // setPage(currentPage);
  // };

  // const handleSubmit = (value: SearchValue) => {
  // setSearchValue(value);
  // };

  // useEffect(() => {
  //   if (props) {
  //     setPosts(props);
  //   }
  // }, [props]);

  // useEffect(() => {
  //   if (!router || !page) return;
  //   (async function () {
  //     const data = await axios.get('/api/post', {
  //       params: {
  //         page,
  //         limit: 10,
  //         category: category,
  //         value: value
  //       }
  //     });
  //     setPosts(data.data);
  //   })();
  // }, [page, category, value, router]);

  if (!props) return <>loading...</>;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main>
        <TableHeader />
        <Table>
          <Thead>
            <PostHeader />
          </Thead>
          {/* <Tbody>{posts && posts.content.map(r => <PostItem key={r.seq} {...r} />)}</Tbody> */}
          <Tbody>{props && props.content.map(r => <PostItem key={r.seq} {...r} />)}</Tbody>
        </Table>
        <PaginationComponent data={props} />
        <Search data={props} />
      </Main>
    </>
  );
}
const Main = styled.main`
  max-width: 1080px;
  margin: 0px auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding-top: 12px;
`;
const Table = styled.table`
  margin-top: 15px;
  width: 100%;
  display: flex;
  flex-direction: column;
`;
const Thead = styled.thead``;
const Tbody = styled.tbody``;

export const getServerSideProps: GetServerSideProps = async context => {
  const page = context.query?.page || 1;
  const limitPath = `&limit=${10}`;
  const categoryPath = context.query?.category ? `&category=${context.query.category}` : '';
  const valuePath = context.query?.value ? `&value=${context.query.value}` : '';

  const url = `http:/localhost:3000/api/post?page=${page}${limitPath}${categoryPath}${valuePath}`;

  const getData = await fetch(url, { method: 'GET' });
  const data = await getData.json();

  return {
    props: data
  };
};
